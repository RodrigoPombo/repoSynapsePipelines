{
	"name": "withHadoopFileSystemAPIs",
	"properties": {
		"folder": {
			"name": "dummy"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/fd75343a-2f47-43cd-bd82-c1ba01988d56/resourceGroups/pomboRG/providers/Microsoft.Synapse/workspaces/pombosynapse1/bigDataPools/sparkpool",
				"name": "sparkpool",
				"type": "Spark",
				"endpoint": "https://pombosynapse1.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "2.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "scala"
					}
				},
				"source": [
					"%%spark\r\n",
					"\r\n",
					"import org.apache.hadoop.fs.FileSystem;\r\n",
					"\r\n",
					"import org.apache.hadoop.fs.Path;\r\n",
					"\r\n",
					"import org.apache.hadoop.fs.FileStatus;\r\n",
					"\r\n",
					"val fs: FileSystem = FileSystem.get(sc.hadoopConfiguration);\r\n",
					"\r\n",
					"for (f <- fs.listStatus(new Path(\"/\"))) {\r\n",
					"\r\n",
					"    print (f.getPath());\r\n",
					"\r\n",
					"    //fs.copyToLocalFile(f.getPath(), new Path(\"/tmp/\"));\r\n",
					"\r\n",
					"}"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "scala"
					},
					"collapsed": true
				},
				"source": [
					"%%spark\r\n",
					"print(sc.hadoopConfiguration)"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "scala"
					},
					"collapsed": true
				},
				"source": [
					"%%spark\r\n",
					"import org.apache.hadoop.fs.FileSystem;\r\n",
					"import org.apache.hadoop.fs.Path;\r\n",
					"import java.net.URI;\r\n",
					"FileSystem.get(URI.create(\"abfss://blobtest@pomboadlsgen22.dfs.core.windows.net/model/metadata\"), sc.hadoopConfiguration).listStatus(new Path(\"abfss://blobtest@pomboadlsgen22.dfs.core.windows.net/model/metadata\"))"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					},
					"collapsed": true
				},
				"source": [
					"%%pyspark\r\n",
					"from notebookutils import mssparkutils\r\n",
					"mssparkutils.fs.ls(\"/model/metadata\")"
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					},
					"collapsed": true
				},
				"source": [
					"%%pyspark\r\n",
					"import subprocess\r\n",
					"command = 'cat /home/trusted-service-user/cluster-env/env/lib/python3.6/site-packages/notebookutils/mssparkutils/handlers/fsHandler.py'\r\n",
					"r = subprocess.check_output(command, shell=True, executable='/bin/bash')\r\n",
					"print(r)"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "scala"
					},
					"collapsed": true
				},
				"source": [
					"%%spark\r\n",
					"\r\n",
					"import org.apache.hadoop.fs.FileSystem;\r\n",
					"\r\n",
					"import org.apache.hadoop.fs.Path;\r\n",
					"\r\n",
					"import org.apache.hadoop.fs.FileStatus;\r\n",
					"\r\n",
					"val fs: FileSystem = FileSystem.get(sc.hadoopConfiguration);\r\n",
					"\r\n",
					"\r\n",
					"fs.copyFromLocalFile(new Path(\"/home/trusted-service-user/cluster-env/env/lib/python3.6/site-packages/notebookutils\"),fs.resolvePath(new Path(\"/\")));\r\n",
					"\r\n",
					""
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "scala"
					},
					"collapsed": true
				},
				"source": [
					"%%spark\r\n",
					"sc.mssparkutils.fs.ls(\"/\")"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "scala"
					},
					"collapsed": true
				},
				"source": [
					"%%spark\r\n",
					"import mssparkutils.fs;\r\n",
					"mssparkutils.fs.ls(\"/\")"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					},
					"collapsed": true
				},
				"source": [
					"%%pyspark\r\n",
					"import site; \r\n",
					"print(site.getsitepackages())"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "scala"
					},
					"collapsed": true
				},
				"source": [
					"%%spark\r\n",
					"import org.apache.hadoop.conf._\r\n",
					"import org.apache.hadoop.fs.FileSystem\r\n",
					"import org.apache.hadoop.fs.Path\r\n",
					"import org.apache.hadoop.fs.FileStatus\r\n",
					"\r\n",
					"//adding this hadoop configuration\r\n",
					"val x = new org.apache.hadoop.conf.Configuration()\r\n",
					"x.set(\"fs.azure.account.key.adlsgen2synapse1.dfs.core.windows.net\",\"6cNC5A47R41PIy9pgjvIqc4jSf6T3ApeMR0VAEMufiIc7IylNwRVBtj8szoume8FNTRHNvIOYDbXGS5ZDIOgnQ==\")\r\n",
					"\r\n",
					"\r\n",
					"val fs: FileSystem = FileSystem.get(sc.hadoopConfiguration);\r\n",
					"val fs1: FileSystem = FileSystem.get(new java.net.URI(\"abfss://pombofs1@adlsgen2synapse1.dfs.core.windows.net/\"),x);\r\n",
					"\r\n",
					"println(\"default storage account from Synapse -- Configured in the sc.hadoopConfiguration\")\r\n",
					"for (f <- fs.listStatus(new Path(\"/\"))) {\r\n",
					"    println(f.getPath());\r\n",
					"}\r\n",
					"\r\n",
					"\r\n",
					"println(\"\")\r\n",
					"println(\"\")\r\n",
					"println(\"\")\r\n",
					"println(\"\")\r\n",
					"\r\n",
					"\r\n",
					"println(\"my own storage account -- \")\r\n",
					"for (f <- fs1.listStatus(new Path(\"/\"))) {\r\n",
					"    println(f.getPath());\r\n",
					"}\r\n",
					""
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					},
					"collapsed": true
				},
				"source": [
					"%%pyspark\r\n",
					"import os\r\n",
					"os.environ[\"DEBUSSY\"] = \"1\""
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "scala"
					},
					"collapsed": true
				},
				"source": [
					"%%spark\r\n",
					"scala.util.Properties.envOrElse(\"DEBUSSY\", \"undefined\")"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "scala"
					},
					"collapsed": true
				},
				"source": [
					"%%spark\r\n",
					"import com.azure.security.keyvault.secrets.SecretClient;\r\n",
					"import com.azure.security.keyvault.secrets.SecretClientBuilder;\r\n",
					"import com.azure.security.keyvault.secrets.models.DeletedSecret;\r\n",
					"import com.azure.security.keyvault.secrets.models.KeyVaultSecret;\r\n",
					"import com.azure.identity._\r\n",
					"import com.azure.core._\r\n",
					"import com.azure.core.credential._\r\n",
					"\r\n",
					"\r\n",
					"//String keyVaultName = System.getenv(\"KEY_VAULT_NAME\");\r\n",
					"var keyVaultUri:String = \"https://\" + \"pombokv\" + \".vault.azure.net\";\r\n",
					"\r\n",
					"var secondServicePrincipal:ClientSecretCredential = new ClientSecretCredentialBuilder().clientId(\"6fe61d6e-6063-4bdd-9db6-a876c30c0f85\").clientSecret(\"0neQ-~.O4mLt~e~E8kQR4MsWECV1eOGVB6\").tenantId(\"72f988bf-86f1-41af-91ab-2d7cd011db47\").build();\r\n",
					"\r\n",
					"// when an access token is requested, the chain will try each\r\n",
					"// credential in order, stopping when one provides a token\r\n",
					"var credentialChain:ChainedTokenCredential = new ChainedTokenCredentialBuilder().addLast(secondServicePrincipal).build();\r\n",
					"\r\n",
					"\r\n",
					"// Azure SDK client builders accept the credential as a parameter\r\n",
					"var client:SecretClient = new SecretClientBuilder().vaultUrl(\"https://pombokv.vault.azure.net\").credential(credentialChain).buildClient();\r\n",
					"\r\n",
					"var x:KeyVaultSecret = client.getSecret(\"pomboUser\");\r\n",
					"System.out.println(x.getValue());\r\n",
					"\r\n",
					""
				],
				"execution_count": 1
			}
		]
	}
}